<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.vic.mapper.UserMapper">
	
	<!-- 实体类属性与数据库表字段不一致时，可以在这儿指定 -->
	<resultMap id="userResultMap" type="User">
		<!-- property指定javabean主键，cloumn指定数据表字段主键 -->
		<id property="id" column="id"/>
		<!-- 普通属性、字段名映射 -->
		<result property="name" column="name"/>
		<result property="age" column="age"/>
		<result property="birthday" column="birthday"/>
		<result property="address" column="address"/>
		<result property="deleteFlag" column="delete_flag"/>
	</resultMap>

	<!-- 小东西，可以简化开发 -->
	<sql id="allColumns">
		id, name, age, birthday, address, delete_flag
	</sql>
	
	<!-- 通过ids查询数据集合 -->
	<select id="queryByIds" resultMap="userResultMap">
		select 
		<include refid="allColumns" />
		from m_user 
		where delete_flag = 1 
		and id in
		<trim suffixOverrides=" or id in ()">
			<foreach item="item" index="index" collection="list" open="(" close=")">
				<if test="index != 0">
					<choose>
					<when test="index % 1000 == 999">) or id in (</when>
					<otherwise>,</otherwise>
					</choose>
				</if>
				#{item}
			</foreach>
		</trim>
	</select>
	
	<!-- 
		id:sql的唯一标示 
	    parameterType:参数类型 
	    resultType:结果类型
	    resultMap:返回为map需要前面指定

	    如果入参为1个参数，可以不用写入参类型
 		如：parameterType="long" 可以省略
	-->
	<select id="queryById" resultMap="userResultMap"><!-- resultType="User" -->
		select 
		<include refid="allColumns"/> 
		from m_user where id = #{id};
	</select>
	
	<!--
	这个语句名为 selectUserById4Map，接受一个int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。
	-->
	<select id="selectUserById4Map" parameterType="long" resultType="hashmap">
		select 
		<include refid="allColumns"/> 
		from m_user 
		where id = #{id}
	</select>
	
	<!-- 插入一条数据 -->
	<insert id="insert" parameterType="User"><!-- parameterType="hashmap" -->
		insert into m_user(name, age, birthday, address, delete_flag)
		values(#{name}, #{age}, #{birthday}, #{address}, 1);
	</insert>

	<!-- 插入多条数据 -->
	<insert id="batchInsert" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into m_user(name, age, birthday, address) values
		<foreach item="item" collection="list" separator=",">
			(#{item.name}, #{item.age}, #{item.birthday}, #{item.address})
		</foreach>
	</insert>

	<!-- 插入用户后返回id 方式1
	1 useGeneratedKeys
	取值范围：true|false
	默认值：false
	含义：设置是否使用JDBC的getGenereatedKeys方法获取主键并赋值到keyProperty设置的领域模型属性中。
	MySQL和SQLServer执行auto-generated key field，因此当数据库设置好自增长主键后，可通过JDBC的getGeneratedKeys方法获取。
	但像Oralce等不支持auto-generated key field的数据库就不能用这种方法获取主键了。

	2 keyProperty
	(仅对 insert 有用) 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值。默认: 不设置。
	如下所示，我们在insert中指定了keyProperty="id"，其中userId代表插入的User对象的主键属性。
	-->
	<insert id="insertAndGetId1" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into m_user(name, age, birthday, address)
		values(#{name}, #{age}, #{birthday}, #{address});
	</insert>

	<!-- 插入用户后返回id 方式2
	使用selectKey元素
	keyProperty属性：
	含义：被设置的目标属性, MyBatis 会通过 getGeneratedKeys 或者selectKey 子元素设置它的值。
	默认: 不设置。我们在insert中指定了keyProperty="id"，其中id代表插入的User对象的主键属性。
	order属性：
	含义：可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE,那么它会首先选择主键,设置 keyProperty 然后执行插入语句。
	如果设置为 AFTER,那么先执行插入语句,然后是 selectKey 元素,要想取得正确的key值，应设为AFTER。
	-->
	<insert id="insertAndGetId2" parameterType="User">
		<!-- mysql插入数据后，获取id -->
		<selectKey keyProperty="id" resultType="long" order="AFTER">
			SELECT LAST_INSERT_ID() AS id;
		</selectKey>
		insert into m_user(name, age, birthday, address)
		values(#{name}, #{age}, #{birthday}, #{address});
	</insert>

	<!-- 根据id修改数据 -->
	<update id="update" parameterType="User">
		update m_user
		set name=#{name},
		<if test="age != null"><!-- and age != '' 当值允许为0时，此条件不能加！ -->
		age=#{age},
		</if>
		birthday=#{birthday},
		address=#{address}
		where id=#{id};
	</update>

	<!-- 动态sql：动态更新 -->
	<update id="updateBySelective" parameterType="User">
		update m_user
		<set>
			<if test="name != null">
				name = #{name},
			</if>
			<if test="age != null">
				age = #{age}
			</if>
			<if test="birthday != null">
				birthday = #{birthday}
			</if>
			<if test="address != null">
				address = #{address}
			</if>
		</set>
		where id = #{id};
	</update>

	<!-- 动态sql：模糊查询 -->
	<select id="fuzzyByCondition" parameterType="hashmap" resultMap="userResultMap">
		select
		<include refid="allColumns"/>
		from m_user where 1=1
		<if test="name != null">
			and name like concat('%',#{name},'%')
		</if>
		<if test="hello != null">
			and address like concat('%',#{hello},'%')
		</if>
		limit #{startIndex}, #{pageSize}
	</select>

	<!-- 逻辑删除用户 -->
	<update id="delete">
		update m_user
		set
		delete_flag = 2
		where id = #{id};
	</update>

	<!-- <update id="batchUpdate" parameterType="java.util.List">
	   update p_user_role_mapping
	   set modify_time = now()
	   , user_role_id = 
	   <foreach collection="list" item="item" index="index" separator=" " open="case ID" close="end">
	     when #{item.id} then #{item.user_role_id}
	   </foreach>
	   , modify_id = 
	   <foreach collection="list" item="item" index="index" separator=" " open="case ID" close="end">
	     when #{item.id} then #{item.modify_id}
	   </foreach>
	    where id in
	   <foreach collection="list" index="index" item="item" separator="," open="(" close=")">
	     #{item.id}
	   </foreach>
	    
	 </update> -->
	
</mapper>